/* <applet code ="Game" height ="500" width="700"></applet>*/
import java.applet.Applet;
import java.awt.event.*;
import java.awt.*;

public class Game extends Applet 
{

    //Declaring refrence variables of components which are going to be used .
    Label welcomeText,requestForName,questionLabel;
    Label personalDetails;
    Button next,previous,checkLater,startTheTest;
    Button submitName,contactCreator;
    TextField nameOfUser;
    CheckboxGroup cbg=new CheckboxGroup();
    Checkbox  option1,option2,option3,option4;
    
    Image backgroundPicture;
    
    
    boolean s1,s2,s3,s4;
    static int currentQuestion=1,scoreSoFar=0,c=0,x=0;
    static String userName="";

    @Override
    public void init()
    {
        welcomeText=new Label("  Welcome to this MCQ test");
        requestForName=new Label("Please enter your name : ");
        questionLabel=new Label("");

        //connect to creator
        //contactCreator=new Button("Know about creator");

        nameOfUser=new TextField();
        
        submitName=new Button(" Submit ");
        startTheTest=new Button("Start Test");
        next=new Button("Next");
        
        backgroundPicture=getImage(getDocumentBase(),"Game-bg.png");
       
        setLayout(null);
        
        welcomeText.setBounds(200,20,160,30);
        requestForName.setBounds(40,100,175,30);
        nameOfUser.setBounds(240,100,200,20);
        submitName.setBounds(240,200,60,20);
        startTheTest.setBounds(170,140,60,20);
        next.setBounds(80,290,40,30);
        questionLabel.setBounds(40,100,300,30);
        
        //contactCreator.setBounds(240,400,150,70);
        add(welcomeText);
        add(requestForName);
        add(nameOfUser);
        add(submitName);
        //add(contactCreator);
    }
    
    @Override
    public void start() 
    {
       submitName.addActionListener(new NameSubmission());
       startTheTest.addActionListener(new Questionhandler());
       next.addActionListener(new Questionhandler());
       //contactCreator.addActionListener(new Details());
    }
    
    public class Details implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            
        }
    }

    public class NameSubmission implements ActionListener
    {
       
        public void actionPerformed(ActionEvent e)
        {
            userName=nameOfUser.getText();
            
            welcomeText.setText("Welcome "+userName);
            remove(submitName);
            remove(nameOfUser);
            remove(requestForName);
            //remove(contactCreator);
            add(startTheTest);
            
        }
    }
    
    public class Questionhandler implements ActionListener
    {
        
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if(x==1)
            {
                remove(option1);remove(option3);
                remove(option2);remove(option4);
            }
            
            option1=new Checkbox ("",cbg,false); 
            option2=new Checkbox ("",cbg,false);
            option3=new Checkbox ("",cbg,false);
            option4=new Checkbox ("",cbg,false);
            
            option1.setBounds(40,150,250,30);
            option2.setBounds(40,180,250,30);
            option3.setBounds(40,210,250,30);
            option4.setBounds(40,240,250,30);
            
            add(option1);add(option3);
            add(option2);add(option4);
                
            if(c==0)
            {
                remove(welcomeText);
                remove(startTheTest);
                add(questionLabel);
                add(next);
                c=1;
            }

            if(currentQuestion==1)
            {
              
                questionLabel.setText("1. Who was inventor of c programming ? ");
                option1.setLabel("Dennis ritchie");option3.setLabel("Edison");
                option2.setLabel("Einstien");option4.setLabel("AryaBhatta");
                
                if(option1.getState()==true)
                {
                    scoreSoFar=scoreSoFar+1;
                }

            }
            else if(currentQuestion==2)
            {
                questionLabel.setText("2.Which of those doesn't allows duplicate elements? ");
                option1.setLabel("List");option3.setLabel("Stack");
                option2.setLabel("set");option4.setLabel("vector");
                
                if(option2.getState()==true)
                {
                    scoreSoFar=scoreSoFar+1;
                }
            }
            
            else if(currentQuestion==3)
            {
                questionLabel.setText("3.Methods such as reverse, shuffle are offered in:-");
                option1.setLabel("Object");option3.setLabel("Collection");
                option2.setLabel("Collections");option4.setLabel("None of the above");
               
                if(option2.getState()==true)
                {
                    scoreSoFar=scoreSoFar+1;
                }
            }
            
            else if(currentQuestion==4)
            {
                questionLabel.setText("4. 'java.util.Collections' is a: ");
                option1.setLabel("Class");option3.setLabel("Collection");
                option2.setLabel("Interface");option4.setLabel("None of the above");
                
                if(option1.getState()==true)
                {
                    scoreSoFar=scoreSoFar+1;
                }
            }
            
            else if (currentQuestion==5)
            {
                questionLabel.setText("5. Which of those doesn't have an index based structure? ");
                option1.setLabel("List");option3.setLabel("Map");
                option2.setLabel("String");option4.setLabel("Array");
                
                if(option3.getState()==true)
                {
                    scoreSoFar=scoreSoFar+1;
                }
                
                next.setLabel("Results");
            }
            
            else
            {
                questionLabel.setText(userName+" your score is  "+scoreSoFar);
                remove(option1);remove(option3);
                remove(option2);remove(option4);
                remove(next);
            }
            
            currentQuestion = currentQuestion+1;
            x=1;
        }
    }
    
    //adding a background image in the applet;
    public void paint(Graphics g)
    {
        g.drawImage(backgroundPicture,0,0,this);
    }
}
